'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Select = exports.SelectFormField = exports.SelectMenu = exports.SelectLabel = exports.SelectSelectedText = exports.SelectRoot = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _mdc = require('@material/select/dist/mdc.select');

var _List = require('../List');

var _Base = require('../Base');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SelectRoot = exports.SelectRoot = (0, _Base.simpleTag)({
  displayName: 'SelectRoot',
  classNames: 'mdc-select',
  defaultProps: {
    role: 'listbox',
    tabIndex: '0'
  }
});

var SelectSelectedText = exports.SelectSelectedText = (0, _Base.simpleTag)({
  displayName: 'SelectSelectedText',
  tag: 'span',
  classNames: 'mdc-select__selected-text'
});

var SelectLabel = exports.SelectLabel = function SelectLabel(props) {
  return React.createElement(
    'div',
    {
      style: { position: 'absolute', marginTop: '34px', whiteSpace: 'nowrap' }
    },
    React.createElement(
      'label',
      { className: 'mdc-text-field__label mdc-text-field__label--float-above' },
      props.children
    )
  );
};

var SelectMenu = exports.SelectMenu = (0, _Base.simpleTag)({
  displayName: 'SelectMenu',
  classNames: 'mdc-simple-menu mdc-select__menu'
});

var SelectFormField = exports.SelectFormField = (0, _Base.simpleTag)({
  displayName: 'SelectMenu',
  classNames: 'rmwc-select-form-field',
  defaultProps: {
    style: {
      height: '48px',
      marginTop: '16px',
      marginBottom: '8px',
      display: 'inline-flex',
      alignItems: 'flex-end'
    }
  }
});

var getDisplayValue = function getDisplayValue(value, options, placeholder) {
  placeholder = placeholder || '\xA0';

  if (options) {
    return options.get(value) !== undefined ? options.get(value) : placeholder;
  }

  return value || placeholder;
};

var Select = (0, _Base.withMDC)({
  mdcConstructor: _mdc.MDCSelect,
  mdcElementRef: true,
  mdcEvents: {
    'MDCSelect:change': function MDCSelectChange(evt, props, api) {
      evt.target.value = api.value;
      props.onChange && props.onChange(evt);
    }
  },
  defaultProps: {
    options: undefined,
    label: undefined,
    placeholder: undefined,
    disabled: false
  },
  onMount: function onMount(props, api) {
    window.requestAnimationFrame(function () {
      return api && api.foundation_.resize();
    });
  },
  onUpdate: function onUpdate(props, nextProps, api) {
    if (!api) return;

    if (props && props.value !== nextProps.value || props === undefined) {
      var newIndex = api.options.indexOf(api.nameditem(nextProps.value));
      api.selectedIndex = newIndex === -1 && nextProps.placeholder ? 0 : newIndex;
    }

    window.requestAnimationFrame(function () {
      return api && api.foundation_.resize();
    });
  }
})((_temp = _class = function (_React$Component) {
  _inherits(_class, _React$Component);

  function _class() {
    _classCallCheck(this, _class);

    return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
  }

  _createClass(_class, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          _props$placeholder = _props.placeholder,
          placeholder = _props$placeholder === undefined ? '' : _props$placeholder,
          value = _props.value,
          _props$label = _props.label,
          label = _props$label === undefined ? '' : _props$label,
          options = _props.options,
          mdcElementRef = _props.mdcElementRef,
          rest = _objectWithoutProperties(_props, ['placeholder', 'value', 'label', 'options', 'mdcElementRef']);

      var selectOptions = Array.isArray(options) ? new Map(options.map(function (val) {
        return [val, val];
      })) : new Map(Object.entries(options).map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            val = _ref2[0],
            label = _ref2[1];

        return [label, val];
      }));

      var displayValue = getDisplayValue(value, selectOptions, placeholder);

      return React.createElement(
        SelectRoot,
        Object.assign({ elementRef: mdcElementRef }, rest),
        React.createElement(
          SelectSelectedText,
          null,
          displayValue
        ),
        !!label.length && React.createElement(
          SelectLabel,
          null,
          label
        ),
        React.createElement(
          SelectMenu,
          null,
          React.createElement(
            _List.List,
            { className: 'mdc-simple-menu__items' },
            !!placeholder.length && React.createElement(
              _List.ListItem,
              { role: 'option', id: 'placeholder', 'aria-disabled': 'true' },
              placeholder
            ),
            options && Array.from(selectOptions).map(function (_ref3, i) {
              var _ref4 = _slicedToArray(_ref3, 2),
                  optionLabel = _ref4[0],
                  optionVal = _ref4[1];

              return React.createElement(
                _List.ListItem,
                { key: i, role: 'option', id: optionVal, tabIndex: '0' },
                optionLabel
              );
            })
          )
        )
      );
    }
  }]);

  return _class;
}(React.Component), Object.defineProperty(_class, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'Select'
}), _temp));

exports.Select = Select;
exports.default = Select;
